// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate mutation files 1`] = `
Object {
  "add": "// @flow

import {
  GraphQLString,
  GraphQLNonNull,
} from 'graphql';
import {
  mutationWithClientMutationId,
  toGlobalId,
} from 'graphql-relay';

import Example from '../model/Example';

import ExampleLoader from '../loader/ExampleLoader';
import ExampleConnection from '../connection/ExampleConnection';

export default mutationWithClientMutationId({
  name: 'ExampleAdd',
  inputFields: {
    example: {
      type: new GraphQLNonNull(GraphQLString),
      description: 'My example field',
    },
  },
  mutateAndGetPayload: async ({ example }, { user }) => {
    // Verify if user is authorized
    if (!user) {
      throw new Error('Unauthorized user');
    }

    // TODO: mutation logic

    return {
      // id: id, // ID of the newly created row
      error: null,
    };
  },
  outputFields: {
    exampleEdge: {
      type: ExampleConnection.edgeType,
      resolve: async ({ id }, args, context) => {
        // Load new edge from loader
        const example = await ExampleLoader.load(
          context, id,
        );

        // Returns null if no node was loaded
        if (!example) {
          return null;
        }

        return {
          cursor: toGlobalId('Example', example),
          node: example,
        };
      },
    },
    error: {
      type: GraphQLString,
      resolve: ({ error }) => error,
    },
  },
});
",
  "addTest": "import { graphql } from 'graphql';
import { schema } from '../../schema';
import { setupTest, getContext } from '../../../test/helper';

import User from '../model/User';
import Example from '../model/Example';

beforeEach(async () => await setupTest());

it('should not allow anonymous user', async () => {
  const query = \`
    mutation M {
      ExampleAdd(input: {
        exampleField: \\"Example field\\"
      }) {
        exampleFieldToRetrieve
      }
    }
  \`;

  const rootValue = {};
  // No user should be passed to context since we are testing an anonymous session
  const context = getContext();

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});

it('should create a record on database', async () => {
  const user = new User({
    name: 'user',
    email: 'user@example.com',
  });

  await user.save();

  const query = \`
    mutation M {
      ExampleAdd(input: {
        exampleField: \\"Example field\\"
      }) {
        exampleFieldToRetrieve
      }
    }
  \`;

  const rootValue = {};
  const context = getContext({ user });

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});
",
  "edit": "// @flow

import {
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
} from 'graphql';
import {
  mutationWithClientMutationId,
  fromGlobalId,
} from 'graphql-relay';

import Example from '../model/Example';

import ExampleType from '../type/ExampleType';
import ExampleLoader from '../loader/ExampleLoader';

export default mutationWithClientMutationId({
  name: 'ExampleEdit',
  inputFields: {
    id: {
      type: new GraphQLNonNull(GraphQLID),
    },
    example: {
      type: GraphQLString,
    },
  },
  mutateAndGetPayload: async (args, context) => {
    const { user } = context;

    // Verify if user is authorized
    if (!user) {
      throw new Error('Unauthorized user');
    }

    const {
      id,
      example,
    } = args;

    // Check if the provided ID is valid
    const example = await Example.findOne({
      _id: fromGlobalId(id).id,
    });

    // If not, throw an error
    if (!example) {
      throw new Error('Invalid exampleId');
    }

    // TODO: mutation logic

    // Clear dataloader cache
    ExampleLoader.clearCache(context, example._id);

    return {
      id: example._id,
      error: null,
    };
  },
  outputFields: {
    example: {
      type: ExampleType,
      resolve: (obj, args, context) => ExampleLoader.load(context, obj.id),
    },
    error: {
      type: GraphQLString,
      resolve: ({ error }) => error,
    },
  },
});
",
  "editTest": "import { graphql } from 'graphql';
import { toGlobalId } from 'graphql-relay';
import { schema } from '../../schema';
import { setupTest, getContext } from '../../../test/helper';

import User from '../model/User';
import Example from '../model/Example';

beforeEach(async () => await setupTest());

it('should not allow anonymous user', async () => {
  const query = \`
    mutation M {
      ExampleEdit(input: {
        id: \\"Example Id\\"
        exampleField: \\"Example field\\"
      }) {
        exampleFieldToRetrieve
      }
    }
  \`;

  const rootValue = {};
  // No user should be passed to context since we are testing an anonymous session
  const context = getContext();

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});

it('should create a record on database', async () => {
  const user = new User({
    name: 'user',
    email: 'user@example.com',
  });

  await user.save();

  const query = \`
    mutation M {
      ExampleEdit(input: {
        id: \\"Example Id\\"
        exampleField: \\"Example field\\"
      }) {
        exampleFieldToRetrieve
      }
    }
  \`;

  const rootValue = {};
  const context = getContext({ user });

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});
",
}
`;

exports[`generate mutation files with schema 1`] = `
Object {
  "add": "// @flow

import {
  GraphQLString,
  GraphQLID,
  GraphQLList,
  GraphQLNonNull,
} from 'graphql';
import {
  mutationWithClientMutationId,
  toGlobalId,
} from 'graphql-relay';

import Post from '../model/Post';

import PostLoader from '../loader/PostLoader';
import PostConnection from '../connection/PostConnection';

import ViewerType from '../type/ViewerType';

export default mutationWithClientMutationId({
  name: 'PostAdd',
  inputFields: {
    title: {
      type: new GraphQLNonNull(GraphQLString),
    },
    user: {
      type: new GraphQLNonNull(GraphQLID),
    },
    slug: {
      type: GraphQLString,
    },
    comments: {
      type: new GraphQLList(GraphQLID),
    },
    tags: {
      type: new GraphQLList(GraphQLString),
    },
  },
  mutateAndGetPayload: async (args, { user }) => {
    // Verify if user is authorized
    if (!user) {
      throw new Error('Unauthorized user');
    }

    const {
      title,
      user,
      slug,
      comments,
      tags,
    } = args;

    // Create new record
    const post = await new Post({
      title,
      user,
      slug,
      comments,
      tags,
    }).save();

    // TODO: mutation logic

    return {
      id: post._id,
      error: null,
    };
  },
  outputFields: {
    postEdge: {
      type: PostConnection.edgeType,
      resolve: async ({ id }, args, context) => {
        // Load new edge from loader
        const post = await PostLoader.load(
          context, id,
        );

        // Returns null if no node was loaded
        if (!post) {
          return null;
        }

        return {
          cursor: toGlobalId('Post', post),
          node: post,
        };
      },
    },
    viewer: {
      type: ViewerType,
      resolve: async (obj, args, { user }) => user,
    },
    error: {
      type: GraphQLString,
      resolve: ({ error }) => error,
    },
  },
});
",
  "addTest": "import { graphql } from 'graphql';
import { schema } from '../../schema';
import { setupTest, getContext } from '../../../test/helper';

import User from '../model/User';
import Post from '../model/Post';

beforeEach(async () => await setupTest());

it('should not allow anonymous user', async () => {
  const query = \`
    mutation M {
      PostAdd(input: {
        title: \\"Example value\\"
        user: \\"Example value\\"
        slug: \\"Example value\\"
        comments: \\"Example value\\"
        tags: \\"Example value\\"
      }) {
        postEdge {
          node {
            title
            user
            slug
            comments
            tags
          }
        }
      }
    }
  \`;

  const rootValue = {};
  // No user should be passed to context since we are testing an anonymous session
  const context = getContext();

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});

it('should create a record on database', async () => {
  const user = new User({
    name: 'user',
    email: 'user@example.com',
  });

  await user.save();

  const query = \`
    mutation M {
      PostAdd(input: {
        title: \\"Example value\\"
        user: \\"Example value\\"
        slug: \\"Example value\\"
        comments: \\"Example value\\"
        tags: \\"Example value\\"
      }) {
        postEdge {
          node {
            title
            user
            slug
            comments
            tags
          }
        }
      }
    }
  \`;

  const rootValue = {};
  const context = getContext({ user });

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});
",
  "edit": "// @flow

import {
  GraphQLString,
  GraphQLNonNull,
  GraphQLID,
  GraphQLList,
} from 'graphql';
import {
  mutationWithClientMutationId,
  fromGlobalId,
} from 'graphql-relay';

import Post from '../model/Post';

import PostType from '../type/PostType';
import PostLoader from '../loader/PostLoader';

export default mutationWithClientMutationId({
  name: 'PostEdit',
  inputFields: {
    id: {
      type: new GraphQLNonNull(GraphQLID),
    },
    title: {
      type: new GraphQLNonNull(GraphQLString),
    },
    user: {
      type: new GraphQLNonNull(GraphQLID),
    },
    slug: {
      type: GraphQLString,
    },
    comments: {
      type: new GraphQLList(GraphQLID),
    },
    tags: {
      type: new GraphQLList(GraphQLString),
    },
  },
  mutateAndGetPayload: async (args, context) => {
    const { user } = context;

    // Verify if user is authorized
    if (!user) {
      throw new Error('Unauthorized user');
    }

    const {
      id,
      title,
      user,
      slug,
      comments,
      tags,
    } = args;

    // Check if the provided ID is valid
    const post = await Post.findOne({
      _id: fromGlobalId(id).id,
    });

    // If not, throw an error
    if (!post) {
      throw new Error('Invalid postId');
    }

    // Edit record
    await post.update({
      title,
      user,
      slug,
      comments,
      tags,
    });

    // TODO: mutation logic

    // Clear dataloader cache
    PostLoader.clearCache(context, post._id);

    return {
      id: post._id,
      error: null,
    };
  },
  outputFields: {
    post: {
      type: PostType,
      resolve: (obj, args, context) => PostLoader.load(context, obj.id),
    },
    error: {
      type: GraphQLString,
      resolve: ({ error }) => error,
    },
  },
});
",
  "editTest": "import { graphql } from 'graphql';
import { toGlobalId } from 'graphql-relay';
import { schema } from '../../schema';
import { setupTest, getContext } from '../../../test/helper';

import User from '../model/User';
import Post from '../model/Post';

beforeEach(async () => await setupTest());

it('should not allow anonymous user', async () => {
  // TODO: specify fields to create a new Post
  const post = new Post({
    title: 'Example value',
    user: 'Example value',
    slug: 'Example value',
    comments: 'Example value',
    tags: 'Example value',
  });

  await post.save();

  const postId = toGlobalId('Post', post._id);

  const query = \`
    mutation M {
      PostEdit(input: {
        id: \\"\${postId}\\"
        example: \\"Example Field to Update\\"
      }) {
        post {
          title
          user
          slug
          comments
          tags
        }
      }
    }
  \`;

  const rootValue = {};
  // No user should be passed to context since we are testing an anonymous session
  const context = getContext();

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});

it('should edit a record on database', async () => {
  const user = new User({
    name: 'user',
    email: 'user@example.com',
  });

  await user.save();

  // TODO: specify fields to create a new Post
  const post = new Post({
    title: 'Example value',
    user: 'Example value',
    slug: 'Example value',
    comments: 'Example value',
    tags: 'Example value',
  });

  await post.save();

  const postId = toGlobalId('Post', post._id);

  const query = \`
    mutation M {
      PostEdit(input: {
        id: \\"\${postId}\\"
        example: \\"Example Field to Update\\"
      }) {
        post {
          title
          user
          slug
          comments
          tags
        }
      }
    }
  \`;

  const rootValue = {};
  const context = getContext({ user });

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});
",
}
`;

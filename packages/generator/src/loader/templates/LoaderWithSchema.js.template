// @flow

import DataLoader from 'dataloader';
import <%= name %>Model from '<%= directories.model %>/<%= name %>';
import connectionFromMongoCursor from './ConnectionFromMongoCursor';
import mongooseLoader from './mongooseLoader';

type <%= name %>Type = {
  id: string,
  _id: string,
  <%_ for (field of schema.fields) { -%>
  <%- field.name + ': ' + field.flowType -%>,
  <%_ } -%>
}

export default class <%= name %> {
  id: string;
  _id: string;
  <%_ for (field of schema.fields) { -%>
  <%- field.name + ': ' + field.flowType -%>;
  <%_ } -%>

  constructor(data: <%= name %>Type) {
    this.id = data.id;
    this._id = data._id;
    <%_ for (field of schema.fields) { -%>
    this.<%- field.name -%> = data.<%- field.name -%>;
    <%_ } -%>
  }
}

export const getLoader = () => new DataLoader(ids => mongooseLoader(<%= name %>Model, ids));

const viewerCanSee = (viewer, data) => {
  // TODO: handle security
  return true;
};

export const load = async ({ user: viewer, dataloaders }, id) => {
  if (!id) return null;

  const data = await dataloaders.<%= rawName %>Loader.load(id.toString());

  if (!data) return null;

  return viewerCanSee(viewer, data) ? new <%= name %>(data) : null;
};

export const clearCache = ({ dataloaders }, id) => {
  return dataloaders.<%= rawName %>Loader.clear(id.toString());
};

export const load<%= pluralName %> = async (context, args) => {
  // TODO: specify conditions
  const <%= pluralCamelCaseName %> = <%= name %>Model.find({});

  return connectionFromMongoCursor({
    cursor: <%= pluralCamelCaseName %>,
    context,
    args,
    loader: load,
  });
};

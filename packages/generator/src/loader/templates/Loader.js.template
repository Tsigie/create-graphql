// @flow

import DataLoader from 'dataloader';
import <%= name %>Model from '<%= directories.model %>/<%= name %>';
import connectionFromMongoCursor from './ConnectionFromMongoCursor';
import mongooseLoader from './mongooseLoader';

type <%= name %>Type = {
  id: string,
  _id: string,
  exampleField: string,
}

export default class <%= name %> {
  id: string;
  _id: string;
  exampleField: string;

  static getLoader = () => new DataLoader(ids => mongooseLoader(<%= name %>Model, ids));

  constructor(data: <%= name %>Type) {
    this.id = data.id;
    this._id = data._id;
    this.exampleField = data.exampleField;
  }

  static viewerCanSee(viewer, data) {
    // TODO: handle security

    return true;
  }

  static async load({ user: viewer, dataloaders }, id) {
    if (!id) {
      return null;
    }

    const data = await dataloaders.<%= rawName %>Loader.load(id.toString());

    return <%= name %>.viewerCanSee(viewer, data) ? new <%= name %>(data) : null;
  }

  static clearCache({ dataloaders }, id) {
    return dataloaders.<%= rawName %>Loader.clear(id.toString());
  }

  static async load<%= pluralName %>(context, args) {
    // TODO: specify conditions
    const <%= pluralCamelCaseName %> = <%= name %>Model.find({});

    return connectionFromMongoCursor({
      cursor: <%= pluralCamelCaseName %>,
      context,
      args,
      loader: <%= name %>.load,
    });
  }
}

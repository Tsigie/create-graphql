// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate a loader 1`] = `
Object {
  "loader": "// @flow

import DataLoader from 'dataloader';
import ExampleModel from '../model/Example';
import connectionFromMongoCursor from './ConnectionFromMongoCursor';
import mongooseLoader from './mongooseLoader';

type ExampleType = {
  id: string,
  _id: string,
  exampleField: string,
}

export default class Example {
  id: string;
  _id: string;
  exampleField: string;

  constructor(data: ExampleType) {
    this.id = data.id;
    this._id = data._id;
    this.exampleField = data.exampleField;
  }
}

export const getLoader = () => new DataLoader(ids => mongooseLoader(ExampleModel, ids));

const viewerCanSee = (viewer, data) => {
  // TODO: handle security
  return true;
};

export const load = async ({ user: viewer, dataloaders }, id) => {
  if (!id) return null;

  const data = await dataloaders.ExampleLoader.load(id.toString());

  if (!data) return null;

  return viewerCanSee(viewer, data) ? new Example(data) : null;
};

export const clearCache = ({ dataloaders }, id) => {
  return dataloaders.ExampleLoader.clear(id.toString());
};

export const loadExamples = async (context, args) => {
  // TODO: specify conditions
  const examples = ExampleModel.find({});

  return connectionFromMongoCursor({
    cursor: examples,
    context,
    args,
    loader: load,
  });
};
",
}
`;

exports[`generate a loader with schema 1`] = `
Object {
  "loader": "// @flow

import DataLoader from 'dataloader';
import PostModel from '../model/Post';
import connectionFromMongoCursor from './ConnectionFromMongoCursor';
import mongooseLoader from './mongooseLoader';

type PostType = {
  id: string,
  _id: string,
  title: string,
  user: string,
  slug: string,
  tags: array,
  oldSlugs: array,
  comments: array,
  externalComments: array,
  createdAt: string,
  updatedAt: string,
}

export default class Post {
  id: string;
  _id: string;
  title: string;
  user: string;
  slug: string;
  tags: array;
  oldSlugs: array;
  comments: array;
  externalComments: array;
  createdAt: string;
  updatedAt: string;

  constructor(data: PostType) {
    this.id = data.id;
    this._id = data._id;
    this.title = data.title;
    this.user = data.user;
    this.slug = data.slug;
    this.tags = data.tags;
    this.oldSlugs = data.oldSlugs;
    this.comments = data.comments;
    this.externalComments = data.externalComments;
    this.createdAt = data.createdAt;
    this.updatedAt = data.updatedAt;
  }
}

export const getLoader = () => new DataLoader(ids => mongooseLoader(PostModel, ids));

const viewerCanSee = (viewer, data) => {
  // TODO: handle security
  return true;
};

export const load = async ({ user: viewer, dataloaders }, id) => {
  if (!id) return null;

  const data = await dataloaders.PostLoader.load(id.toString());

  if (!data) return null;

  return viewerCanSee(viewer, data) ? new Post(data) : null;
};

export const clearCache = ({ dataloaders }, id) => {
  return dataloaders.PostLoader.clear(id.toString());
};

export const loadPosts = async (context, args) => {
  // TODO: specify conditions
  const posts = PostModel.find({});

  return connectionFromMongoCursor({
    cursor: posts,
    context,
    args,
    loader: load,
  });
};
",
}
`;

exports[`generate a loader with schema and without timestamps 1`] = `
Object {
  "loader": "// @flow

import DataLoader from 'dataloader';
import UserModel from '../model/User';
import connectionFromMongoCursor from './ConnectionFromMongoCursor';
import mongooseLoader from './mongooseLoader';

type UserType = {
  id: string,
  _id: string,
  name: string,
  password: string,
  email: string,
  active: boolean,
  lastLoginAt: string,
}

export default class User {
  id: string;
  _id: string;
  name: string;
  password: string;
  email: string;
  active: boolean;
  lastLoginAt: string;

  constructor(data: UserType) {
    this.id = data.id;
    this._id = data._id;
    this.name = data.name;
    this.password = data.password;
    this.email = data.email;
    this.active = data.active;
    this.lastLoginAt = data.lastLoginAt;
  }
}

export const getLoader = () => new DataLoader(ids => mongooseLoader(UserModel, ids));

const viewerCanSee = (viewer, data) => {
  // TODO: handle security
  return true;
};

export const load = async ({ user: viewer, dataloaders }, id) => {
  if (!id) return null;

  const data = await dataloaders.UserLoader.load(id.toString());

  if (!data) return null;

  return viewerCanSee(viewer, data) ? new User(data) : null;
};

export const clearCache = ({ dataloaders }, id) => {
  return dataloaders.UserLoader.clear(id.toString());
};

export const loadUsers = async (context, args) => {
  // TODO: specify conditions
  const users = UserModel.find({});

  return connectionFromMongoCursor({
    cursor: users,
    context,
    args,
    loader: load,
  });
};
",
}
`;
